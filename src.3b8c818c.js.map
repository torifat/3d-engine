{"version":3,"sources":["src/matrix.ts","src/utils.ts","src/Device.ts","src/Mesh.ts","src/vector.ts","src/Camera.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.3b8c818c.js","sourceRoot":"..","sourcesContent":["export type Matrix = Array<Array<number>>;\n\n// Internal helpers\nfunction rows(matrix: Matrix) {\n  return matrix.length;\n}\n\nfunction columns(matrix: Matrix) {\n  return matrix.length ? matrix[0].length : 0;\n}\n\nfunction assertSquareMatrix(matrix: Matrix) {\n  const rCount = rows(matrix);\n  const cCount = columns(matrix);\n\n  if (rCount !== cCount) {\n    throw new Error(\n      `Need a square matrix to perform this operation! ${rCount} != ${cCount}`,\n    );\n  }\n}\n\nfunction create(\n  rows: number,\n  columns: number,\n  value: (row: number, column: number) => number,\n) {\n  const output = [[]];\n  for (let r = 0; r < rows; ++r) {\n    output[r] = [];\n    for (let c = 0; c < columns; ++c) {\n      output[r][c] = value(r, c);\n    }\n  }\n  return output;\n}\n\n// Public APIs\nexport const empty = (rows: number, columns: number = rows) =>\n  create(rows, columns, () => 0);\n\nexport const identity = (size: number) =>\n  create(size, size, (row, col) => (row === col ? 1 : 0));\n\nexport const copy = (matrix: Matrix) =>\n  create(rows(matrix), columns(matrix), (row, column) => matrix[row][column]);\n\n// https://www.mathsisfun.com/algebra/matrix-multiplying.html\n// TODO: Add support for multiple arguments using divide and conquer\nexport function multiply(left: Matrix, right: Matrix): Matrix {\n  const rRows = rows(right);\n  const lCols = columns(left);\n\n  if (lCols !== rRows) {\n    throw new Error(\n      `Columns of left Matrix must be equal to rows of right Matrix! ${lCols} != ${rRows}`,\n    );\n  }\n\n  const lRows = rows(left);\n  const rCols = columns(right);\n\n  const output = empty(0);\n  // Output Matrix left.rows x right.cols\n  for (let r = 0; r < lRows; ++r) {\n    output[r] = [];\n\n    for (let c = 0; c < rCols; ++c) {\n      let total = 0;\n      for (let i = 0; i < lCols; ++i) {\n        total += left[r][i] * right[i][c];\n      }\n      output[r][c] = total;\n    }\n  }\n\n  return output;\n}\n\n// https://www.mathsisfun.com/algebra/matrix-determinant.html\nexport function determinant(matrix: Matrix) {\n  const { u } = lu(matrix, true);\n  const size = rows(matrix);\n  let r = 1;\n  for (let i = 0; i < size; ++i) {\n    r *= u[i][i];\n  }\n  return Math.round(r);\n}\n\n// LU decomposition\n// Gaussian elimination & shortcut - https://www.youtube.com/watch?v=UlWcofkUDDU\nexport function lu(\n  matrix: Matrix,\n  onlyU: boolean = false,\n): {\n  l?: Matrix;\n  u: Matrix;\n} {\n  assertSquareMatrix(matrix);\n  const size = rows(matrix);\n  const l = onlyU ? undefined : identity(size);\n  const u = copy(matrix);\n\n  for (let c = 0; c < size - 1; ++c) {\n    for (let r = c + 1; r < size; ++r) {\n      const f = -u[r][c] / u[c][c];\n      if (!onlyU) {\n        l[r][c] = -f;\n      }\n      for (let i = c; i < size; ++i) {\n        u[r][i] += f * u[c][i];\n      }\n    }\n  }\n\n  return { l, u };\n}\n","import { Matrix, multiply } from './matrix';\n\nexport type Point2D = [number, number];\nexport type Point3D = [number, number, number];\n\nexport const zero = (): Point3D => [0, 0, 0];\nexport const up = (): Point3D => [0, 1, 0];\n\nexport type RGBA = [number, number, number, number];\n\n// https://en.wikipedia.org/wiki/Rotation_matrix#Determining_the_angle\nexport function transform({\n  translation = [0, 0, 0],\n  rotation: [xTheta, yTheta, zTheta] = [0, 0, 0],\n}: {\n  translation?: Point3D;\n  rotation?: [number, number, number];\n}): Matrix {\n  const [tx, ty, tz] = translation;\n\n  const xc = Math.cos(xTheta); // a\n  const xs = Math.sin(xTheta); // b\n  const yc = Math.cos(yTheta); // x\n  const ys = Math.sin(yTheta); // y\n  const zc = Math.cos(zTheta); // l\n  const zs = Math.sin(zTheta); // m\n\n  // http://bit.ly/2vuMpKl\n  return [\n    [zc * yc + xs * zs * ys, xs * zc * ys - zs * yc, xc * ys, 0],\n    [xc * zs, xc * zc, -xs, 0],\n    [xs * zs * yc - zc * ys, xs * (zc * yc) + zs * ys, xc * yc, 0],\n    [tx, ty, tz, 1],\n  ];\n}\n\n// https://www.codeguru.com/cpp/misc/misc/graphics/article.php/c10123/Deriving-Projection-Matrices.htm#page-3\nexport function perspectiveProjectionMatrix(\n  fov: number,\n  aspectRatio: number,\n  zNear: number,\n  zFar: number,\n): Matrix {\n  const depth = zFar - zNear;\n  // cot(fov/2);\n  const a = 1 / Math.tan(fov / 2);\n  const b = zFar / depth;\n  const c = -(zFar * zNear) / depth;\n  return [\n    [a / aspectRatio, 0, 0, 0],\n    [0, a, 0, 0],\n    [0, 0, b, 1],\n    [0, 0, c, 0],\n  ];\n}\n","import { Camera } from './Camera';\nimport { Matrix, multiply } from './matrix';\nimport { Mesh } from './Mesh';\nimport {\n  perspectiveProjectionMatrix,\n  Point3D,\n  RGBA,\n  transform,\n  up,\n} from './utils';\n// TODO: make `import type` after upgrading to tsc 3.8\nimport { Vector } from './vector';\n\nexport class Device {\n  private backBuffer: ImageData;\n  private context: CanvasRenderingContext2D;\n  private height: number;\n  private width: number;\n\n  constructor(canvas: HTMLCanvasElement) {\n    const context = canvas.getContext('2d');\n    if (!context) throw new Error('No context!');\n\n    this.context = context;\n    this.height = canvas.height;\n    this.width = canvas.width;\n    this.backBuffer = context.getImageData(0, 0, this.width, this.height);\n  }\n\n  clear() {\n    this.context.clearRect(0, 0, this.width, this.height);\n    this.backBuffer = this.context.getImageData(0, 0, this.width, this.height);\n  }\n\n  present() {\n    this.context.putImageData(this.backBuffer, 0, 0);\n  }\n\n  putPixel(x: number, y: number, color: RGBA) {\n    // 000011112222...\n    // RGBARGBARGBA...\n    const { data } = this.backBuffer;\n    const index = (y * this.width + x) * 4;\n\n    data[index] = color[0] * 255;\n    data[index + 1] = color[1] * 255;\n    data[index + 2] = color[2] * 255;\n    data[index + 3] = color[3] * 255;\n  }\n\n  project(vertex: Point3D, transform: Matrix) {\n    // Homogeneous coordinates\n    const point = multiply([[...vertex, 1]], transform);\n\n    // Cartesian coordinates\n    // Perspective divide (normalization)\n    const point_x = point[0][0] / point[0][3];\n    const point_y = point[0][1] / point[0][3];\n\n    const x = Math.floor(point_x * this.width + this.width / 2.0);\n    const y = Math.floor(-point_y * this.height + this.height / 2.0);\n    return [x, y];\n  }\n\n  drawPoint([x, y]: Vector) {\n    // Clipping\n    if (x >= 0 && y >= 0 && x < this.width && y < this.height) {\n      this.putPixel(x, y, [1, 1, 0, 1]);\n    }\n  }\n\n  drawLine(from: Vector, to: Vector) {\n    this.drawBLine(from, to);\n    // TODO: Try https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm\n    // const d = v.subtract(to, from);\n    // const distance = v.norm(d);\n    // if (distance < 2) return;\n\n    // const midPoint = v.add(from, v.multiply(d, 0.5));\n    // this.drawPoint(midPoint.map(Math.floor));\n    // this.drawLine(from, midPoint);\n    // this.drawLine(midPoint, to);\n  }\n\n  // https://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n  drawBLine(from: Vector, to: Vector) {\n    let x0 = Math.floor(from[0]);\n    let y0 = Math.floor(from[1]);\n    const x1 = Math.floor(to[0]);\n    const y1 = Math.floor(to[1]);\n    const dx = Math.abs(x1 - x0);\n    const dy = Math.abs(y1 - y0);\n    const sx = x0 < x1 ? 1 : -1;\n    const sy = y0 < y1 ? 1 : -1;\n    let err = dx - dy;\n\n    while (true) {\n      this.drawPoint([x0, y0]);\n\n      if (x0 == x1 && y0 == y1) break;\n      const e2 = 2 * err;\n      if (e2 > -dy) {\n        err -= dy;\n        x0 += sx;\n      }\n      if (e2 < dx) {\n        err += dx;\n        y0 += sy;\n      }\n    }\n  }\n\n  render(camera: Camera, meshes: Array<Mesh> = []) {\n    const viewMatrix = camera.lookAt(up());\n\n    const projectionMatrix = perspectiveProjectionMatrix(\n      0.78,\n      this.width / this.height,\n      0.01,\n      1.0,\n    );\n\n    meshes.forEach(({ faces, position, rotation, vertices }) => {\n      const worldMatrix = transform({\n        translation: position,\n        rotation,\n      });\n\n      const transformMatrix = multiply(\n        multiply(worldMatrix, viewMatrix),\n        projectionMatrix,\n      );\n\n      for (let i = 0; i < vertices.length - 1; ++i) {\n        const from = this.project(vertices[i], transformMatrix);\n        const to = this.project(vertices[i + 1], transformMatrix);\n        this.drawLine(from, to);\n      }\n\n      faces.forEach(face => {\n        const a = this.project(vertices[face[0]], transformMatrix);\n        const b = this.project(vertices[face[1]], transformMatrix);\n        const c = this.project(vertices[face[2]], transformMatrix);\n\n        this.drawLine(a, b);\n        this.drawLine(b, c);\n        this.drawLine(c, a);\n      });\n\n      // mesh.vertices.forEach(vertex =>\n      //   this.drawPoint(this.project(vertex, transformMatrix)),\n      // );\n    });\n  }\n}\n","import { Point3D, zero } from './utils';\n\ntype Triangle = [number, number, number];\n\nexport class Mesh {\n  public position: Point3D = zero();\n  public rotation: Point3D = zero();\n  public vertices: Array<Point3D> = [];\n  public faces: Array<Triangle> = [];\n\n  constructor(name: string, vertices = [], faces = []) {\n    console.log(`${name} constructed!`);\n    this.vertices = vertices;\n    this.faces = faces;\n  }\n}\n","export type Vector = Array<number>;\n\nfunction assertSameDimensions(left: Vector, right: Vector) {\n  if (left.length !== right.length) {\n    throw new Error(\n      `Dimension of both vectors needs to be same! ${left.length} != ${right.length}`,\n    );\n  }\n}\n\nfunction reduceVectors<T>(\n  left: Vector,\n  right: Vector,\n  reducer: (acc: T, lValue: number, rValue: number) => T,\n  initial: T,\n) {\n  assertSameDimensions(left, right);\n  return left.reduce<T>((acc, l, i) => reducer(acc, l, right[i]), initial);\n}\n\nconst concatVectors = (\n  left: Vector,\n  right: Vector,\n  fn: (lValue: number, rValue: number) => number,\n) =>\n  reduceVectors<Vector>(left, right, (acc, l, r) => acc.concat(fn(l, r)), []);\n\n// Public APIs\nexport const add = (left: Vector, right: Vector) =>\n  concatVectors(left, right, (l, r) => l + r);\n\nexport const subtract = (left: Vector, right: Vector) =>\n  concatVectors(left, right, (l, r) => l - r);\n\nexport const multiply = (vector: Vector, scalar: number) =>\n  vector.map(i => i * scalar);\n\n// https://www.mathsisfun.com/algebra/vectors-dot-product.html\nexport const dot = (left: Vector, right: Vector) =>\n  reduceVectors(left, right, (acc, l, r) => acc + l * r, 0);\n\n// https://www.mathsisfun.com/algebra/vectors-cross-product.html\nexport function cross(left: Vector, right: Vector) {\n  assertSameDimensions(left, right);\n  if (left.length !== 3) {\n    throw new Error('Only support cross product for 3 dimensional vectors!');\n  }\n\n  return [\n    left[1] * right[2] - left[2] * right[1],\n    left[2] * right[0] - left[0] * right[2],\n    left[0] * right[1] - left[1] * right[0],\n  ];\n}\n\n// norm/magnitude/unit\nexport const norm = (vector: Vector) =>\n  Math.sqrt(vector.reduce((acc, i) => acc + i * i, 0));\n\nexport function normalize(vector: Vector) {\n  const u = norm(vector);\n  return vector.map(i => (i ? i / u : i));\n}\n","import { Point3D, zero } from './utils';\nimport { cross, dot, normalize, subtract } from './vector';\n\nconst enum LookAtDirection {\n  Left,\n  Right,\n}\n\nexport class Camera {\n  constructor(\n    public position: Point3D = zero(),\n    public target: Point3D = zero(),\n  ) {}\n\n  // https://www.3dgep.com/understanding-the-view-matrix/\n  // https://web.archive.org/web/20131222170415/http:/robertokoci.com/world-view-projection-matrix-unveiled/\n  lookAt(up: Point3D, direction: LookAtDirection = LookAtDirection.Left) {\n    // Position === Eye\n    const eye = this.position;\n\n    // Forward vector\n    const z = normalize(\n      direction === LookAtDirection.Left\n        ? subtract(this.target, eye)\n        : subtract(eye, this.target),\n    );\n    // Right vector\n    const x = normalize(cross(up, z));\n    // Up vector\n    const y = cross(z, x);\n\n    return [\n      [x[0], y[0], z[0], 0],\n      [x[1], y[1], z[1], 0],\n      [x[2], y[2], z[2], 0],\n      [-dot(x, eye), -dot(y, eye), -dot(z, eye), 1],\n    ];\n  }\n}\n","import { Device } from './Device';\nimport { Mesh } from './Mesh';\nimport { Camera } from './Camera';\n\n// Stop continuous rendering\nconst DEBUG_FRAME_STEP = false;\n\nconst canvas = document.querySelector('canvas');\nconst d = new Device(canvas);\nconst c = new Camera([0, 0, 10]);\nconst meshes = [];\nconst cube = new Mesh(\n  'Cube',\n  [\n    [-1, 1, 1],\n    [1, 1, 1],\n    [-1, -1, 1],\n    [1, -1, 1],\n    [-1, 1, -1],\n    [1, 1, -1],\n    [1, -1, -1],\n    [-1, -1, -1],\n  ],\n  [\n    [0, 1, 2],\n    [1, 2, 3],\n    [1, 3, 6],\n    [1, 5, 6],\n    [0, 1, 4],\n    [1, 4, 5],\n    [2, 3, 7],\n    [3, 6, 7],\n    [0, 2, 7],\n    [0, 4, 7],\n    [4, 5, 6],\n    [4, 6, 7],\n  ],\n);\nmeshes.push(cube);\n\nfunction drawingLoop() {\n  d.clear();\n\n  cube.rotation[0] += 0.01;\n  cube.rotation[0] %= 360;\n  cube.rotation[1] += 0.01;\n  cube.rotation[1] %= 360;\n  cube.rotation[2] += 0.01;\n  cube.rotation[2] %= 360;\n\n  d.render(c, meshes);\n  d.present();\n\n  if (!DEBUG_FRAME_STEP) {\n    requestAnimationFrame(drawingLoop);\n  }\n}\n\nrequestAnimationFrame(drawingLoop);\n\ndocument.getElementById('control-panel').addEventListener('click', event => {\n  // Clicked a button\n  if (event.target instanceof HTMLButtonElement) {\n    const { index, value } = event.target.dataset;\n    c.position[index] += +value;\n    if (DEBUG_FRAME_STEP) {\n      requestAnimationFrame(drawingLoop);\n    }\n  }\n});\n\ndocument.addEventListener('keydown', event => {\n  switch (event.code) {\n    case 'ArrowLeft':\n      c.position[0] -= 0.5;\n      break;\n    case 'ArrowRight':\n      c.position[0] += 0.5;\n      break;\n    case 'ArrowUp':\n      c.position[event.shiftKey ? 2 : 1] -= 0.5;\n      break;\n    case 'ArrowDown':\n      c.position[event.shiftKey ? 2 : 1] += 0.5;\n      break;\n  }\n\n  if (DEBUG_FRAME_STEP) {\n    requestAnimationFrame(drawingLoop);\n  }\n});\n"]}